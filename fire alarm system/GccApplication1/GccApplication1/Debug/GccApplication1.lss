
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cf  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000543  00000000  00000000  000007db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a7  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000347  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002c  00000000  00000000  00001253  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000127f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z9uart_initl>:
}
unsigned char uart_Receive( void )
{
	while ( !(UCSRA & (1<<RXC)) );
	return UDR;
}
  6c:	dc 01       	movw	r26, r24
  6e:	cb 01       	movw	r24, r22
  70:	88 0f       	add	r24, r24
  72:	99 1f       	adc	r25, r25
  74:	aa 1f       	adc	r26, r26
  76:	bb 1f       	adc	r27, r27
  78:	88 0f       	add	r24, r24
  7a:	99 1f       	adc	r25, r25
  7c:	aa 1f       	adc	r26, r26
  7e:	bb 1f       	adc	r27, r27
  80:	9c 01       	movw	r18, r24
  82:	ad 01       	movw	r20, r26
  84:	22 0f       	add	r18, r18
  86:	33 1f       	adc	r19, r19
  88:	44 1f       	adc	r20, r20
  8a:	55 1f       	adc	r21, r21
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	44 1f       	adc	r20, r20
  92:	55 1f       	adc	r21, r21
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	72 e1       	ldi	r23, 0x12	; 18
  98:	8a e7       	ldi	r24, 0x7A	; 122
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 6a 00 	call	0xd4	; 0xd4 <__udivmodsi4>
  a0:	da 01       	movw	r26, r20
  a2:	c9 01       	movw	r24, r18
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	a1 09       	sbc	r26, r1
  a8:	b1 09       	sbc	r27, r1
  aa:	89 2f       	mov	r24, r25
  ac:	9a 2f       	mov	r25, r26
  ae:	ab 2f       	mov	r26, r27
  b0:	bb 27       	eor	r27, r27
  b2:	80 bd       	out	0x20, r24	; 32
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	29 b9       	out	0x09, r18	; 9
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	8a b9       	out	0x0a, r24	; 10
  bc:	8e e8       	ldi	r24, 0x8E	; 142
  be:	80 bd       	out	0x20, r24	; 32
  c0:	08 95       	ret

000000c2 <main>:

int main ( void )
{
	uart_init (9600);
  c2:	60 e8       	ldi	r22, 0x80	; 128
  c4:	75 e2       	ldi	r23, 0x25	; 37
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <_Z9uart_initl>
}
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	08 95       	ret

000000d4 <__udivmodsi4>:
  d4:	a1 e2       	ldi	r26, 0x21	; 33
  d6:	1a 2e       	mov	r1, r26
  d8:	aa 1b       	sub	r26, r26
  da:	bb 1b       	sub	r27, r27
  dc:	fd 01       	movw	r30, r26
  de:	0d c0       	rjmp	.+26     	; 0xfa <__udivmodsi4_ep>

000000e0 <__udivmodsi4_loop>:
  e0:	aa 1f       	adc	r26, r26
  e2:	bb 1f       	adc	r27, r27
  e4:	ee 1f       	adc	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	a2 17       	cp	r26, r18
  ea:	b3 07       	cpc	r27, r19
  ec:	e4 07       	cpc	r30, r20
  ee:	f5 07       	cpc	r31, r21
  f0:	20 f0       	brcs	.+8      	; 0xfa <__udivmodsi4_ep>
  f2:	a2 1b       	sub	r26, r18
  f4:	b3 0b       	sbc	r27, r19
  f6:	e4 0b       	sbc	r30, r20
  f8:	f5 0b       	sbc	r31, r21

000000fa <__udivmodsi4_ep>:
  fa:	66 1f       	adc	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	88 1f       	adc	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	1a 94       	dec	r1
 104:	69 f7       	brne	.-38     	; 0xe0 <__udivmodsi4_loop>
 106:	60 95       	com	r22
 108:	70 95       	com	r23
 10a:	80 95       	com	r24
 10c:	90 95       	com	r25
 10e:	9b 01       	movw	r18, r22
 110:	ac 01       	movw	r20, r24
 112:	bd 01       	movw	r22, r26
 114:	cf 01       	movw	r24, r30
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
